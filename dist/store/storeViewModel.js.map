{"version":3,"sources":["../../src/store/storeViewModel.js"],"names":[],"mappings":";;;;;;kBAgCmB,UAAU,IAAV,EAAgB;AAC3B,QAAI,SAAS,KAAK,MAAL,IAAe,EAA5B;AAAA,QACI,WAAW,KAAK,QADpB;AAAA,QAEI,qBAAqB,KAAK,kBAF9B;AAAA,QAGI,UAAU,KAAK,OAAL,IAAgB,EAH9B;AAAA,QAII,OAAO,EAJX;;AAMA,QAAI,CAAC,QAAL,EAAe;AACX,gBAAQ,IAAR,CAAa,sCAAb,EAAqD,IAArD;AACA;AACH;;AAED,QAAI,CAAC,kBAAL,EAAyB;AACrB,gBAAQ,IAAR,CAAa,6DAAb,EAA4E,IAA5E;AACA;AACH;;;;AAID,aAAS,SAAT,GAAqB;AACjB,8BAAY,IAAZ,CAAiB,kBAAjB,EAAqC,UAAU,KAAV,EAAiB,OAAjB,EAA0B;AAC3D,gBAAI,KAAJ,EAAW;AACP,wBAAQ,KAAR,CAAc,qCAAd,EAAqD,IAArD,EAA2D,KAA3D;AACA;AACH;AACD,gBAAI,QAAQ,OAAO,UAAP,GAAoB,QAAQ,OAAO,UAAf,CAApB,GAAiD,OAA7D;;AAEA,gBAAI,QAAQ,2BAAZ,EAAyC;AACrC,wBAAQ,MAAM,MAAN,CAAa,UAAU,GAAV,EAAe,IAAf,EAAqB;AACtC,wBAAI,MAAM,QAAQ,2BAAlB;AACA,wBAAI,QAAQ,oBAAZ,EAAkC;AAC9B,4BAAI,KAAK,GAAL,CAAJ,IAAiB,IAAI,KAAK,GAAL,CAAJ,KAAkB,EAAnC;AACA,4BAAI,KAAK,GAAL,CAAJ,EAAe,IAAf,CAAoB,IAApB;AACH,qBAHD,MAGO;AACH,4BAAI,KAAK,GAAL,CAAJ,IAAiB,OAAO,eAAP,GAAyB,KAAK,OAAO,eAAZ,CAAzB,GAAwD,IAAzE,C;AACH;AACD,2BAAO,GAAP;AACH,iBATO,EASL,EATK,CAAR;AAUH;AACD,wBAAY,QAAZ,CAAqB,QAArB,EAA+B,KAA/B;AACH,SApBD;AAqBH;AACD,gB;;AAEA,QAAI,KAAK,EAAT,EAAa;;AACT,aAAK,IAAL,CAAU,uBAAQ,KAAK,EAAL,GAAU,UAAlB,EAA8B,YAAY;AAChD;AACH,SAFS,CAAV;AAGH;;AAED,WAAO;AACC,iBAAS,mBAAY;AACrB,iBAAK,OAAL,CAAa,UAAU,GAAV,EAAe;AACxB,oBAAI,OAAJ;AACH,aAFD;AAGH;AALE,KAAP;AAOH,C;;AAzFL;;IAAY,W;;AACZ;;;;AACA;;;;;;AAuFK","file":"storeViewModel.js","sourcesContent":["import * as noticeboard from 'scalejs.noticeboard';\nimport dataservice from 'dataservice';\nimport { receive } from 'scalejs.messagebus';\n\n    //TODO: Rename results to resultsKey\n\n    /**\n     * Store: a component that takes a dataSourceEndpoint\n     * and adds the results to the noticeboard.\n     * It has no viewmodel and does not accept children.\n     *\n     * @module store\n     *\n     * @param {object} node\n     *  The configuation object for the module\n     * @param {string} node.type='store'\n     * The type of the node is store     *\n     * @param {object} node.storeKey\n     *  The key that the results are stored on in the noticeboard\n     * @param {object|Object[]} node.dataSourceEndpoint\n     *  An object defining the endpoint(s) that makes the ajax calls\n     * @param {string} node.dataSourceEndpoint.uri\n     *   The uri for the endpoint\n     * @param {string} [node.dataSourceEndpoint.url]\n     *  The url for the endpoint\n     * @param {object} [node.dataSourceEndpoint.options]\n     *  Options for the ajax call\n     * @param {object} [node.keyMap]\n     *  A mapper object to map keys\n     * @param {object} [node.keyMap.result]\n     *  Map the results from the ajax call with this key\n     */\n    export default function (node) {\n        var keyMap = node.keyMap || {},\n            storeKey = node.storeKey,\n            dataSourceEndpoint = node.dataSourceEndpoint,\n            options = node.options || {},\n            subs = [];\n\n        if (!storeKey) {\n            console.warn('Cannot store data without a storeKey', node);\n            return;\n        }\n\n        if (!dataSourceEndpoint) {\n            console.warn('Cannot retrieve data for store without a dataSourceEndpoint', node);\n            return;\n        }\n\n        //todo: check if storeKey is already in the noticeboard\n        // option to persist data and not request endpoint multiple times\n        function fetchData() {\n            dataservice.ajax(dataSourceEndpoint, function (error, results) {\n                if (error) {\n                    console.error('Error when retrieving data for node', node, error);\n                    return;\n                }\n                var value = keyMap.resultsKey ? results[keyMap.resultsKey] : results;\n\n                if (options.mapArrayToDictionaryWithKey) {\n                    value = value.reduce(function (obj, item) {\n                        var key = options.mapArrayToDictionaryWithKey;\n                        if (options.aggregateMappedItems) {\n                            obj[item[key]] = obj[item[key]] || [];\n                            obj[item[key]].push(item);\n                        } else {\n                            obj[item[key]] = keyMap.resultsValueKey ? item[keyMap.resultsValueKey] : item; // will overwrite any existing items with the key\n                        }\n                        return obj;\n                    }, {})\n                }\n                noticeboard.setValue(storeKey, value);\n            });\n        }\n        fetchData(); //initial call\n\n        if (node.id) { //setup refresh receiver if store has id\n            subs.push(receive(node.id + '.refresh', function () {\n                fetchData();\n            }));\n        }\n\n        return {\n                dispose: function () {\n                subs.forEach(function (sub) {\n                    sub.dispose();\n                });\n            }\n        }\n    };\n"]}