{"version":3,"sources":["../../src/template/templateViewModel.js"],"names":[],"mappings":";;;;;kBAOwB,iB;;AAPxB;;AAEA;;AACA;;;;AACA;;;;;;AAGe,SAAS,iBAAT,CAA2B,IAA3B,EAAiC;AAC5C,QAAI,aAAa,mBAAG,UAApB;AAAA,QACI,QAAQ,iBAAE,KADd;AAAA,QAEI,OAAO,WAAW,KAAK,IAAL,IAAa,EAAxB,CAFX;AAAA,QAGI,UAAU,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,aAA7B,GAA6C,EAAE,UAAU,EAAZ,EAAgB,MAAM,IAAtB,EAA7C,GAA4E,IAH1F;AAAA,QAII,kBAAkB,yBAAuB,IAAvB,CAA4B,OAA5B,CAJtB;AAAA,Q;AAKI,uBAAmB,0BAAwB,IAAxB,CAA6B,OAA7B,CALvB;AAAA,Q;;AAOI,cAAU,WAAW,KAAK,OAAL,KAAiB,KAA5B,CAPd;AAAA;;AASI,iBAAa,iBAAE,SAAF,CAAY,KAAK,MAAjB,CATjB;AAAA,QAUI,MAVJ;AAAA,QAWI,gBAXJ;AAAA,QAYI,sBAAsB,uCAZ1B;;AAcA,aAAS,QAAT,CAAkB,GAAlB,EAAuB;AACnB,eAAO,CAAC,UAAU,EAAX,EAAe,GAAf,CAAP;AACH;;AAED,QAAI,KAAK,QAAL,IAAiB,CAAC,oBAAoB,KAAK,QAAzB,CAAtB,EAA0D;AACtD,gBAAQ,KAAR,CAAc,0BAAd,EAA0C,KAAK,QAA/C;AACA,aAAK,QAAL,GAAgB,aAAhB;AACH;;AAED,uBAAmB,iBAAiB,KAAK,QAAL,IAAiB,EAAlC,CAAnB;;AAEA,QAAI,UAAJ,EAAgB;AACZ,iBAAS,gBAAgB,UAAhB,CAAT;AACH,KAFD,MAEO;AACH,iBAAS,kBAAY,CAAG,CAAxB;AACH;;AAED,QAAI,KAAK,kBAAT,EAA6B;;;AAGzB,YAAI,WAAW;AACX,sBAAU,kBAAU,GAAV,EAAe,OAAf,EAAwB;AAC9B,oBAAI,GAAJ,EAAS;AACL,4BAAQ,GAAR,CAAY,oBAAZ,EAAkC,GAAlC;AACA;AACH;AACD,qBAAK,OAAL;AACH;AAPU,SAAf;AASA,wBAAgB,KAAK,kBAArB,EAAyC,MAAzC,CAAgD,QAAhD;AACH;;AAED,WAAO,MAAM,IAAN,EAAY;AACf,0BAAkB,gBADH;AAEf,gBAAQ,MAFO;AAGf,cAAM,IAHS;AAIf,iBAAS,OAJM;AAKf,iBAAS;AALM,KAAZ,CAAP;AAOH","file":"templateViewModel.js","sourcesContent":["import { createViewModel as createViewModelUnbound,\n        createViewModels as createViewModelsUnbound } from 'scalejs.metadataFactory'\nimport { getRegisteredTemplates } from 'scalejs.mvvm'\nimport _ from 'lodash';\nimport ko from 'knockout';\n\n\nexport default function templateViewModel(node) {\n    var observable = ko.observable,\n        merge = _.merge,\n        data = observable(node.data || {}),\n        context = node.options && node.options.createContext ? { metadata: [], data: data } : this,\n        createViewModel = createViewModelUnbound.bind(context), // passes context\n        createViewModels = createViewModelsUnbound.bind(context), // passes context\n        // properties\n        isShown = observable(node.visible !== false),\n        //visible = observable(),\n        actionNode = _.cloneDeep(node.action),\n        action,\n        mappedChildNodes,\n        registeredTemplates = getRegisteredTemplates();\n\n    function getValue(key) {\n        return (data() || {})[key];\n    }\n\n    if (node.template && !registeredTemplates[node.template]) {\n        console.error('Template not registered ', node.template);\n        node.template = 'no_template';\n    }\n\n    mappedChildNodes = createViewModels(node.children || []);\n\n    if (actionNode) {\n        action = createViewModel(actionNode);\n    } else {\n        action = function () { };\n    }\n\n    if (node.dataSourceEndpoint) {\n        // create a callback object that the ajaxAction knows how to use.\n        // this is the alternative to the lously coupled nextactions[] || error actions.\n        var callback = {\n            callback: function (err, results) {\n                if (err) {\n                    console.log('ajax request error', err);\n                    return;\n                }\n                data(results);\n            }\n        }\n        createViewModel(node.dataSourceEndpoint).action(callback);\n    }\n\n    return merge(node, {\n        mappedChildNodes: mappedChildNodes,\n        action: action,\n        data: data,\n        isShown: isShown,\n        context: this\n    });\n}\n"]}