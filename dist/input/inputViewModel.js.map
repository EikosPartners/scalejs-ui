{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":[],"mappings":";;;;;kBAmE4B,c;;AAlE5B;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAGI,IAAI,aAAa,kBAAQ,IAAR,CAAa,UAA9B;AAAA,IACI,kBAAkB,kBAAQ,IAAR,CAAa,eADnC;AAAA,IAEI,WAAW,kBAAQ,IAAR,CAAa,QAF5B;AAAA,IAGI,WAAW,kBAAQ,UAAR,CAAmB,QAHlC;AAAA,IAII,QAAQ,kBAAQ,MAAR,CAAe,KAJ3B;AAAA,IAKI,SAAS,kBAAQ,MAAR,CAAe,MAL5B;AAAA,IAMI,MAAM,kBAAQ,MAAR,CAAe,GANzB;AAAA,IAOI,MAAM,kBAAQ,MAAR,CAAe,GAPzB;AAAA,IAQI,KAAK,kBAAQ,IAAR,CAAa,EARtB;AAAA,IASI,SAAS,mBAAG,MAThB;AAAA,IAUI,aAAa;AACT,iDADS;AAET;AAFS,CAVjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDe,SAAS,cAAT,CAAwB,IAAxB,EAA8B;AACzC,QAAI,UAAU,KAAK,OAAL,IAAgB,EAA9B;AAAA,QACI,SAAS,KAAK,MAAL,IAAe,EAD5B;AAAA,QAEI,UAAU,QAAQ,EAFtB;AAAA,QAGI,aAAa,kBAHjB;AAAA;;AAKI,aAAS,gBAAgB,MAAM,OAAN,CAAc,QAAQ,MAAtB,IAAgC,QAAQ,MAAxC,GAAiD,EAAjE,CALb;AAAA,QAMI,UAAU,WAAW,CAAC,KAAK,MAAjB,CANd;AAAA,QAOI,WAAW,YAPf;AAAA,QAQI,cAAc,QAAQ,WAAR,IAAuB,IARzC;AAAA,QASI,WAAW,cAAc,YAAY,QAA1B,GAAqC,KATpD;AAAA,QAUI,UAAU,QAAQ,EAVtB;AAAA,QAWI,WAAW,WAAW,QAAQ,QAAnB,CAXf;AAAA,QAYI,WAAW,gBAZf;AAAA,QAaI,YAAY,eAAe,YAAY,SAb3C;AAAA,QAcI,UAAU,QAAQ,OAAR,KAAoB,IAApB,GAA4B,YAA5B,GAA2C,QAAQ,OAdjE;AAAA,QAeI,eAAe,WAAW,KAAX,CAfnB;AAAA,Q;AAgBI,YAAQ,WAAW,KAAX,CAhBZ;AAAA,QAiBI,cAAc,YAjBlB;AAAA;;AAmBI,YAAQ,YAnBZ;AAAA,QAoBI,kBAAkB,KAAK,SAAL,KAAmB,YAAnB,IAAmC,mBAAG,YAAH,CAAgB,YAAY;AAC7E,YAAI,cAAc,CAAC,OAAD,IAAY,UAAZ,GAAyB,EAAzB,GAA8B,YAAhD;AACA,eAAO,WAAP;AACH,KAHoD,CApBzD;AAAA,QAwBI,aAxBJ;AAAA,QAyBI,OAzBJ;AAAA,QA0BI,WA1BJ;AAAA,QA2BI,OAAO,EA3BX;AAAA,QA4BI,WA5BJ;AAAA,QA6BI,uBA7BJ;AAAA,QA8BI,aAAa;AACT,uBAAe;AADN,KA9BjB;AAAA,QAiCI,SAAS,QAAQ,MAAR,IAAkB,QAAQ,MAAR,CAAe,aAAjC,GAAiD,WAAW,QAAQ,MAAR,CAAe,aAA1B,CAAjD,GAA4F,iBAAE,QAjC3G;AAAA,QAkCI,gBAlCJ;AAAA,QAmCI,YAAY;AACR,iBAAS,OADD;AAER,oBAAY,UAFJ;AAGR,kBAAU,QAHF;AAIR,gBAAQ,MAJA;AAKR,cAAM,IALE;AAMR,kBAAU;AANF,KAnChB;;AA4CA,aAAS,gBAAT,GAA4B;;;AAGxB,YAAI,KAAK,SAAL,KAAmB,cAAvB,EAAuC;AACnC,mBAAO,gBAAgB,QAAQ,KAAR,IAAiB,EAAjC,CAAP;AACH,SAFD,MAEO;;;AAGH,mBAAO,WAAW,IAAI,QAAQ,KAAZ,IAAqB,QAAQ,KAA7B,GAAqC,EAAhD,CAAP;AACH;AACJ;;AAED,aAAS,cAAT,GAA0B;AACtB,YAAI,QAAQ,QAAZ,EAAsB;AAClB,mBAAO,WAAW,QAAQ,QAAnB,CAAP;AACH,SAFD,MAEO,IAAI,QAAQ,QAAZ,EAAsB;AACzB,mBAAO,WAAW,QAAQ,QAAR,EAAX,CAAP;AACH,SAFM,MAEA;AACH,mBAAO,WAAW,KAAX,CAAP;AACH;AACJ;;AAED,aAAS,aAAT,CAAuB,IAAvB,EAA6B;AACzB,eAAO,sBAAO,IAAP,EAAa,MAAb,CAAoB,YAApB,CAAP;AACH;;AAED,aAAS,OAAT,CAAiB,MAAjB,EAAyB;AACrB,YAAI,UAAU,MAAM,OAAN,CAAc,OAAO,OAArB,IAAgC,OAAO,OAAvC,GAAiD,CAAC,OAAO,OAAR,CAA/D;AAAA,YACI,WAAW,MAAM,OAAN,CAAc,OAAO,QAArB,IAAiC,OAAO,QAAxC,GAAmD,CAAC,OAAO,QAAR,CADlE;AAAA,YAEI,YAAY,OAAO,SAAP,IAAoB,KAFpC;AAAA,YAGI,gBAAgB,WAAW,OAAO,aAAlB,KAAoC,iBAAE,QAH1D;;AAKA,eAAO,UAAU,GAAV,EAAe;AAClB,mBAAO;AACH,sBAAM,cAAc,QAAQ,GAAR,CAAY,UAAS,CAAT,EAAY;AACxC,2BAAO,IAAI,CAAJ,CAAP;AACH,iBAFmB,EAEjB,IAFiB,CAEZ,OAAO,SAAP,IAAoB,KAFR,CAAd,CADH;AAIH,uBAAO,SAAS,GAAT,CAAa,UAAS,CAAT,EAAY;AAC5B,2BAAO,IAAI,CAAJ,CAAP;AACH,iBAFM,EAEJ,IAFI,CAEC,OAAO,SAAP,IAAoB,KAFrB,CAJJ;AAOH,0BAAU;AAPP,aAAP;AASH,SAVD;AAWH;;;;AAID,aAAS,QAAT,GAAoB;AACjB,mBAAW,UAAX,CAAsB,IAAtB;AACA,eAAO,CAAC,WAAW,OAAX,EAAD,IAAyB,SAAzB,IAAsC,KAAK,QAAL,EAAtC,IAAyD,WAAW,QAAX,OAA0B,CAA1F;AACF;;;AAGD,aAAS,UAAT,GAAsB;AAClB,YAAI,eAAe,YAAY,OAA/B,EAAwC;AACpC,mBAAO;AACH,uBAAO,OADJ;AAEH,uBAAO,YAAY,OAAZ,CAAoB;AAFxB,aAAP;AAIH;AACJ;;;AAGD,aAAS,cAAT,GAA0B;AACtB,YAAI,YAAJ,EAAkB,OAAlB;;AAEA,YAAI,CAAC,WAAW,UAAX,EAAD,IAA4B,WAAW,OAAX,EAA5B,IAAoD,CAAC,KAAK,QAAL,EAArD,IAAwE,CAAC,SAA7E,EAAwF;;;AAGpF;AACH;;AAED,uBAAe,WAAW,KAAX,EAAf;AACA,uBAAe,aAAa,aAAa,MAAb,GAAqB,CAAlC,MAAyC,GAAzC,GAA+C,YAA/C,GAA8D,eAAe,GAA5F;;AAEA,YAAI,iBAAiB,WAArB,EAAkC;AAC9B,sBAAU,CAAC,KAAK,UAAL,IAAmB,KAAK,KAAzB,IAAkC,eAA5C;AACH,SAFD,MAEO;AACH,sBAAU,CAAC,KAAK,UAAL,IAAmB,KAAK,KAAzB,IAAkC,eAAlC,GAAoD,YAA9D;AACH;;AAED,eAAO;AACH,qBAAS,OADN;AAEH,sBAAU,WAAW,QAAX,EAFP;AAGH,qBAAS,mBAAY;AACjB,yBAAS,IAAT;AACH;AALE,SAAP;AAOH;;;;AAKD,aAAS,QAAT,GAAoB;AAChB,eAAO,gBAAgB,EAAvB;AACH;;AAED,aAAS,QAAT,CAAkB,IAAlB,EAAwB;AACpB,YAAI,QAAQ,GAAG,IAAH,EAAS,QAAT,IAAqB,KAAK,KAA1B,GAAkC,IAA9C;AAAA,YACI,aAAa,WAAW,UAAX,EADjB;;AAGA,YAAI,cAAc,KAAK,SAAnB,CAAJ,EAAmC;AAC/B,0BAAc,KAAK,SAAnB,EAA8B,IAA9B;AACH,SAFD,MAEO,IAAI,UAAU,QAAd,EAAwB;AAC3B,sBAAU,QAAV,CAAmB,IAAnB;AACH,SAFM,MAEA;AACH,uBAAW,KAAX;AACH;;;AAGD,YAAG,CAAC,UAAJ,EAAgB;AAAE,uBAAW,UAAX,CAAsB,KAAtB;AAA+B;AACpD;;;AAGD,aAAS,MAAT,CAAgB,IAAhB,EAAsB;AAClB,YAAG,KAAK,cAAL,CAAoB,OAApB,CAAH,EAAiC;AAC7B,qBAAS,KAAK,KAAd;AACH;AACD,YAAG,KAAK,cAAL,CAAoB,cAApB,CAAH,EAAwC;AACpC,wBAAY,KAAK,YAAjB;AACH;AACJ;;AAED,aAAS,UAAT,CAAoB,KAApB,EAA2B,MAA3B,EAAmC;AAC/B,YAAI,CAAC,GAAG,MAAH,EAAW,QAAX,CAAL,EAA2B;AACvB,oBAAQ,KAAR,CAAc,yCAAd,EAAyD,MAAzD;AACA;AACH;AACD,YAAI,UAAU,sBAAO,KAAP,EAAc,GAAd,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,QAAQ,SAAR,IAAqB,YAAtD,CAAd;AACD,iBAAS,OAAT;AACF;;AAED,aAAS,WAAT,CAAqB,KAArB,EAA4B;AACxB,YAAG,UAAU,QAAb,EAAuB;AACnB,qBAAS,CAAC,UAAV;AACA;AACH;AACD,iBAAS,KAAT;AACH;;AAED,aAAS,WAAT,CAAsB,IAAtB,EAA4B;AAC1B,iBAAS,IAAT;AACD;;AAED,QAAI,WAAW,KAAK,SAAhB,CAAJ,EAAgC;AAC5B,eAAO,SAAP,EAAkB,WAAW,KAAK,SAAhB,EAA2B,IAA3B,CAAgC,OAAhC,EAAyC,IAAzC,EAA+C,SAA/C,CAAlB;AACH;;AAED,QAAI,KAAK,SAAL,KAAmB,UAAvB,EAAmC;AAC/B,eAAO,SAAP,CAAiB,UAAU,SAAV,EAAqB;AAClC,gBAAG,UAAU,OAAV,CAAkB,QAAQ,OAA1B,MAAuC,CAAC,CAA3C,EAA8C;AAC1C,2BAAW,QAAQ,OAAnB;AACH,aAFD,MAEO;AACH,2BAAW,QAAQ,SAAnB;AACH;AACJ,SAND;AAOA,YAAG,iBAAiB,QAAQ,OAA5B,EAAqC;AACnC,mBAAO,IAAP,CAAY,QAAQ,OAApB;AACD;AACJ;;;AAGD,QAAI,QAAQ,OAAZ,EAAqB;AACjB,gBAAQ,OAAR,GAAkB,mBAAG,UAAH,CAAc,QAAQ,OAAtB,CAAlB;AACH;;AAED,QAAI,QAAQ,OAAZ,EAAqB;AACjB,gBAAQ,OAAR,GAAkB,mBAAG,UAAH,CAAc,QAAQ,OAAtB,CAAlB;AACH;;;AAGD,QAAG,CAAC,QAAQ,QAAZ,EAAsB;AAClB,gBAAQ,KAAR,CAAc,6CAAd,EAA6D,IAA7D;AACH;;AAED,QAAI,QAAQ,UAAZ,EAAuB;AACnB,2BAAmB,kBAAQ,eAAR,CAAwB,eAAxB,CAAwC,IAAxC,CAA6C,IAA7C,EAAmD;AAClE,kBAAM,QAD4D;AAElE,wBAAY,MAFsD;AAGlE,qBAAS,MAAM,QAAQ,UAAd,EAA0B,EAAE,MAAM,EAAR,EAA1B;AAHyD,SAAnD,CAAnB;;AAMA,mBAAW,SAAX,CAAqB,UAAU,QAAV,EAAoB;AACrC,6BAAiB,OAAjB,CAAyB,IAAzB,CAA8B,KAAK,EAAnC,IAAyC,QAAzC,C;AACA,gBAAG,aAAa,EAAhB,EAAmB;AACf,iCAAiB,MAAjB,CAAwB,EAAE,UAAU,kBAAU,KAAV,EAAiB,IAAjB,EAAuB;AACvD,+BAAO,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAU,GAAV,EAAe;AACrC,gCAAG,CAAC,QAAQ,UAAT,IAAuB,CAAC,QAAQ,IAAnC,EAAyC;AACrC,wCAAQ,IAAR,CAAa,uEAAb,EAAsF,IAAtF;AACA;AACH;AACD,gCAAI,OAAO,QAAQ,UAAR,IAAsB,QAAQ,UAAR,GAAqB,GAArB,CAAjC;AACA,gCAAI,QAAQ,KAAK,MAAjB,EAAyB;AACrB,qCAAK,MAAL,CAAY,KAAK,GAAL,CAAZ;AACH,6BAFD,MAEO,IAAI,QAAQ,IAAR,IAAgB,IAAI,KAAK,GAAL,CAAJ,EAAe,OAAf,CAApB,EAA6C;AAChD,wCAAQ,IAAR,GAAe,GAAf,IAAsB,KAAK,GAAL,EAAU,KAAhC;AACH;AACJ,yBAXD;AAYH,qBAbuB,EAAxB;AAcH;AACJ,SAlBD;AAmBH;;;AAGD,kBAAc,MAAM,iBAAE,SAAF,CAAY,QAAQ,WAApB,CAAN,EAAwC,EAAE,aAAc,WAAhB,EAAxC,CAAd;AACA,QAAI,YAAY,UAAhB,EAA4B;AACxB,oBAAY,UAAZ,CAAuB,MAAvB,GAAgC,CAC5B,QAAQ,WAAR,CAAoB,UAApB,CAA+B,OAA/B,GACI,QAAQ,WAAR,CAAoB,UAApB,CAA+B,IADnC,GAEM,QAAQ,WAAR,CAAoB,UAHE,EAI5B,QAAQ,QAJoB,CAAhC;AAMH;AACD,QAAG,UAAU,WAAb,EAA0B;AACtB,sBAAc,MAAM,WAAN,EAAmB,UAAU,WAA7B,CAAd;AACH;AACD,iBAAa,WAAW,MAAX,CAAkB,WAAlB,CAAb;;;AAGA,oBAAgB;AACZ,sBAAc,sBAAU,IAAV,EAAgB;AAC1B,gBAAG,MAAM,OAAN,CAAc,KAAK,KAAnB,CAAH,EAA8B;AAC1B,2BAAW,KAAK,KAAhB;AACH,aAFD,MAEO,IAAG,KAAK,KAAL,KAAe,IAAf,IAAuB,KAAK,KAAL,KAAe,SAAzC,EAAoD;AACvD,2BAAW,CAAC,KAAK,KAAN,CAAX;AACH,aAFM,MAEA;AACH,2BAAW,EAAX;AACH;AACJ;AATW,KAAhB;;;AAaA,QAAI,IAAI,KAAK,OAAT,CAAJ,EAAuB;AACnB,WAAG,KAAK,OAAR,EAAiB,SAAjB,IAA8B,QAAQ,KAAK,OAAb,CAA9B,GAAuD,UAAU,SAAS,YAAW;AACjF,mBAAO,SAAS,KAAK,OAAd,EAAuB,QAAQ,QAAR,IAAoB,YAAY;AAC1D,wBAAQ,KAAR,CAAc,sDAAd,EAAsE,IAAtE;AACH,aAFM,CAAP;AAGH,SAJgE,CAAjE;;AAMA,gBAAQ,SAAR;AACA,gBAAQ,SAAR,CAAkB,OAAlB;AACH;;;;AAID,QAAI,QAAQ,eAAZ,EAA6B;AACzB,kCAA0B,SAAS,YAAY;AAC3C,gBAAI,QAAQ,QAAR,KAAqB,KAAzB,EAAgC;AAC5B,6B;AACH;AACD,mBAAO,SAAS,QAAQ,eAAjB,EAAkC,QAAQ,QAA1C,CAAP;AACH,SALyB,CAA1B;AAMA,iBAAS,yBAAT;AACA,gCAAwB,SAAxB,CAAkC,UAAS,KAAT,EAAgB;AAC9C,qBAAS,KAAT;AACH,SAFD;AAGA,aAAK,IAAL,CAAU,uBAAV;AACH;;AAED,QAAI,IAAI,OAAJ,EAAa,eAAb,MAAkC,SAAtC,EAAiD;AAC7C,mBAAW,SAAX,CAAqB,UAAU,KAAV,EAAiB;AAClC,gBAAG,SAAS,SAAS,OAAO,KAAP,CAAT,CAAZ,EAAqC;AACjC,2BAAW,OAAO,KAAP,EAAc,OAAd,CAAsB,CAAtB,CAAX;AACH;AACJ,SAJD;AAKH;;AAED,UAAM,SAAN,CAAgB,YAAU;AACtB,YAAG,OAAH,EAAY;AACR,uBAAW,MAAM,IAAN,CAAW,IAAX,EAAgB,KAAhB,CAAX,EAAmC,IAAnC;AACH;AACJ,KAJD;;AAMA,WAAO,MAAM,IAAN,EAAY,SAAZ,EAAuB;AAC1B,oBAAY,UADc;AAE1B,gBAAQ,UAAU,MAAV,IAAoB,MAFF;AAG1B,wBAAgB,cAHU;AAI1B,qBAAa,WAJa;AAK1B,kBAAU,QALgB;AAM1B,eAAO,KANmB;AAO1B,yBAAiB,eAPS;AAQ1B,oBAAY,UARc;AAS1B,qBAAa,WATa;AAU1B,iBAAS,OAViB;AAW1B,kBAAU,QAXgB;AAY1B,kBAAU,QAZgB;AAa1B,qBAAa,UAAU,WAAV,IAAyB,WAbZ;AAc1B,kBAAU,QAdgB;AAe1B,mBAAW,SAfe;AAgB1B,iBAAS,OAhBiB;AAiB1B,sBAAc,YAjBY;AAkB1B,eAAO,KAlBmB;AAmB1B,kBAAU,UAAU,QAAV,IAAsB,QAnBN;AAoB1B,iBAAS,OApBiB;AAqB1B,iBAAS,IArBiB;AAsB1B,eAAO,WAAW,KAtBQ;AAuB1B,kBAAU,UAAU,QAAV,IAAsB,QAvBN;AAwB1B,kBAAU,QAxBgB;AAyB1B,gBAAQ,MAzBkB;AA0B1B,iBAAS,mBAAY;AACjB,gBAAG,UAAU,OAAb,EAAsB;AAClB,0BAAU,OAAV;AACH;AACD,aAAC,QAAQ,EAAT,EAAa,OAAb,CAAqB,UAAS,GAAT,EAAc;AAC/B,oBAAI,OAAJ,IAAe,IAAI,OAAJ,EAAf;AACH,aAFD;AAGH;AAjCyB,KAAvB,CAAP;AAmCH","file":"inputViewModel.js","sourcesContent":["/*global define,sandbox */\r\nimport sandbox from 'scalejs.sandbox';\r\nimport autocompleteViewModel from './autocomplete/autocompleteViewModel';\r\nimport selectViewModel from './select/selectViewModel';\r\nimport dataservice from 'dataservice';\r\nimport _ from 'lodash';\r\nimport ko from 'knockout';\r\nimport moment from 'moment';\r\n    \r\n    // imports\r\n    var observable = sandbox.mvvm.observable,\r\n        observableArray = sandbox.mvvm.observableArray,\r\n        computed = sandbox.mvvm.computed,\r\n        evaluate = sandbox.expression.evaluate,\r\n        merge = sandbox.object.merge,\r\n        extend = sandbox.object.extend,\r\n        has = sandbox.object.has,\r\n        get = sandbox.object.get,\r\n        is = sandbox.type.is,\r\n        unwrap = ko.unwrap,\r\n        inputTypes = {\r\n            autocomplete: autocompleteViewModel,\r\n            select: selectViewModel\r\n        }\r\n\r\n    // inputViewModel\r\n    // implements an input of type\r\n    // text, select, date, radio, checkbox, checkboxList\r\n\r\n    //TODO: Refactor Session\r\n    //- createJSDocs\r\n    //- revisit and de-tangle bindings\r\n    //- refactor validations so that the tooltip works without inputText wrapper in the inputType template\r\n    //- remove knockout require\r\n    //- move dataservice to sandbox\r\n    //- move tooltip/helpText in options\r\n    //- move tooltip into pattern object (if pattern is true, use message from validation obj)\r\n    //\r\n    // ...add more refactor session goals here!\r\n\r\n    /**\r\n     *  input is the component to use when accepting user-input.\r\n     *  This is the best way to create an interactive UI and\r\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\r\n     *\r\n     * @module input\r\n     *\r\n     * @param {object} node\r\n     *  The configuration specs for the component.\r\n     * @param {string} [node.id]\r\n     *  By specifying an \"id\" on your input, you are automatically adding your input's data to the data context model.\r\n     * @param {object} node.options\r\n     *  The options pertaining to your specific inputType\r\n     * @param {array} [node.options.values]\r\n     *  The values that can be chosen from for inputTypes that have selections (e.g. radio, checkboxList)\r\n     * @param {boolean} [node.hidden=false]\r\n     *  Whether or not to hide the input\r\n     * @param {object} [node.options.validations]\r\n     *  KO validations object to validate the inputValue\r\n     * @param {boolean} [node.options.validations.required]\r\n     *  Required validation for ko - also will show * next to label indicating it is required\r\n     * @param {boolean} [node.options.disabled]\r\n     *  Disables the input\r\n     * @param {object|string|boolean} [node.options.pattern]\r\n     *  Sets an inputmask for the input. If a string, this is the mask. If an object, gets passed as is.\r\n     *  If boolean = true, uses pattern validation.\r\n     */\r\n    export default function inputViewModel(node) {\r\n        var options = node.options || {},\r\n            keyMap = node.keyMap || {},\r\n            context = this || {},\r\n            inputValue = createInputValue(),\r\n            // values are used in radio, checkbox, checkboxList\r\n            values = observableArray(Array.isArray(options.values) ? options.values : []),\r\n            isShown = observable(!node.hidden),\r\n            hasFocus = observable(),\r\n            validations = options.validations || null,\r\n            required = validations ? validations.required : false,\r\n            context = this || {},\r\n            disabled = observable(options.disabled),\r\n            readonly = createReadonly(),\r\n            maxlength = validations && validations.maxLength,\r\n            pattern = options.pattern === true ?  getPattern() : options.pattern,\r\n            tooltipShown = observable(false), //for patterns\r\n            shake = observable(false),\r\n            customError = observable(),\r\n            //specific datepicker\r\n            hover = observable(),\r\n            datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(function () {\r\n                var placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\r\n                return placeholder;\r\n            }),\r\n            setValueFuncs,\r\n            visible,\r\n            validations,\r\n            subs = [],\r\n            wasModified,\r\n            computedValueExpression,\r\n            formatters = {\r\n                dateFormatter: dateFormatter\r\n            },\r\n            format = options.values && options.values.textFormatter ? formatters[options.values.textFormatter] : _.identity,\r\n            registeredAction,\r\n            viewmodel = {\r\n                mapItem: mapItem,\r\n                inputValue: inputValue,\r\n                hasFocus: hasFocus,\r\n                format: format,\r\n                subs: subs,\r\n                readonly: readonly\r\n            };\r\n\r\n        function createInputValue() {\r\n\r\n            // checkboxList can have multiple answers so make it an array\r\n            if (node.inputType === 'checkboxList') {\r\n                return observableArray(options.value || []);\r\n            } else {\r\n                // if there is no initial value, set it to empty string,\r\n                // so that isModified does not get triggered for empty dropdowns\r\n                return observable(has(options.value) ? options.value : '');\r\n            }\r\n        }\r\n\r\n        function createReadonly() {\r\n            if (options.readonly) {\r\n                return observable(options.readonly)\r\n            } else if (context.readonly) {\r\n                return observable(context.readonly())\r\n            } else {\r\n                return observable(false)\r\n            }\r\n        }\r\n\r\n        function dateFormatter(date) {\r\n            return moment(date).format('MM/DD/YYYY');\r\n        }\r\n\r\n        function mapItem(mapper) {\r\n            var textKey = Array.isArray(mapper.textKey) ? mapper.textKey : [mapper.textKey],\r\n                valueKey = Array.isArray(mapper.valueKey) ? mapper.valueKey : [mapper.valueKey],\r\n                delimeter = mapper.delimeter || ' / ',\r\n                textFormatter = formatters[mapper.textFormatter] || _.identity\r\n\r\n            return function (val) {\r\n                return {\r\n                    text: textFormatter(textKey.map(function(k) {\r\n                        return val[k];\r\n                    }).join(mapper.delimiter || ' / ')),\r\n                    value: valueKey.map(function(k) {\r\n                        return val[k];\r\n                    }).join(mapper.delimiter || ' / '),\r\n                    original: val\r\n                }\r\n            }\r\n        }\r\n\r\n        // validates the input by setting isModified to true\r\n        // returns true if the input has an error\r\n        function validate() {\r\n           inputValue.isModified(true);\r\n           return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\r\n        }\r\n\r\n        // implicitly determine pattern if there is a validation\r\n        function getPattern() {\r\n            if (validations && validations.pattern) {\r\n                return {\r\n                    alias: 'Regex',\r\n                    regex: validations.pattern.params\r\n                };\r\n            }\r\n        }\r\n\r\n        // returns the message to be displayed (based on validations)\r\n        function visibleMessage() {\r\n            var inputMessage, message;\r\n            \r\n            if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\r\n                // the user has yet to modify the input\r\n                // or there is no message. return nothing\r\n                return;\r\n            }\r\n\r\n            inputMessage = inputValue.error();\r\n            inputMessage = inputMessage[inputMessage.length -1] === '.' ? inputMessage : inputMessage + '.';            \r\n\r\n            if (inputMessage === 'Required.') {\r\n                message = (node.errorLabel || node.label) + ' is required.';\r\n            } else {\r\n                message = (node.errorLabel || node.label) + ' is invalid. ' + inputMessage;\r\n            }\r\n\r\n            return {\r\n                message: message,\r\n                severity: inputValue.severity(),\r\n                onClick: function () {\r\n                    hasFocus(true);\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        // default getValue function just unwraps inputValue\r\n        // todo: refactor 'inputValue' to 'data'\r\n        function getValue() {\r\n            return inputValue() || '';\r\n        }\r\n\r\n        function setValue(data) {\r\n            var value = is(data, 'object') ? data.value : data,\r\n                wasModifed = inputValue.isModified();\r\n            // uses setValueFunc if defined, else updates inputValue\r\n            if (setValueFuncs[node.inputType]) {\r\n                setValueFuncs[node.inputType](data);\r\n            } else if (viewmodel.setValue) {\r\n                viewmodel.setValue(data);\r\n            } else {\r\n                inputValue(value);\r\n            }\r\n\r\n            // programtically setting the inputValue will not cause isModified to become true\r\n            if(!wasModifed) { inputValue.isModified(false); }\r\n        }\r\n\r\n        // to replace setValue accepts object or value\r\n        function update(data) {\r\n            if(data.hasOwnProperty('value')) {\r\n                setValue(data.value);\r\n            }\r\n            if(data.hasOwnProperty('ErrorMessage')) {\r\n                customError(data.ErrorMessage);\r\n            }\r\n        }\r\n\r\n        function assignDate(value, params) {\r\n            if (!is(params, 'object')) {\r\n                console.error('Assign date only supports object params', params);\r\n                return;\r\n            }\r\n            var newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\r\n           setValue(newDate);\r\n        }\r\n\r\n        function setDisabled(value) {\r\n            if(value === 'toggle') {\r\n                disabled(!disabled());\r\n                return;\r\n            }\r\n            disabled(value);\r\n        }\r\n\r\n        function setReadonly (bool) {\r\n          readonly(bool)\r\n        }\r\n\r\n        if (inputTypes[node.inputType]) {\r\n            extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\r\n        }\r\n\r\n        if (node.inputType === 'checkbox') {\r\n            values.subscribe(function (newValues) {\r\n                if(newValues.indexOf(options.checked) !== -1) {\r\n                    inputValue(options.checked);\r\n                } else {\r\n                    inputValue(options.unchecked);\r\n                }\r\n            });\r\n            if(inputValue() === options.checked) {\r\n              values.push(options.checked);\r\n            }\r\n        }\r\n\r\n        // make min/max date into observables\r\n        if (options.minDate) {\r\n            options.minDate = ko.observable(options.minDate);\r\n        }\r\n\r\n        if (options.maxDate) {\r\n            options.maxDate = ko.observable(options.maxDate);\r\n        }\r\n\r\n        // make sure this was bound\r\n        if(!context.metadata) {\r\n            console.error('context not being passed to input viewmodel', node);\r\n        }\r\n\r\n        if (options.registered){\r\n            registeredAction = sandbox.metadataFactory.createViewModel.call(this, {\r\n                type: 'action',\r\n                actionType: 'ajax',\r\n                options: merge(options.registered, { data: {} })\r\n            });\r\n\r\n            inputValue.subscribe(function (newValue) {\r\n                registeredAction.options.data[node.id] = newValue; //our own sub gets called before context is updated\r\n                if(newValue !== ''){\r\n                    registeredAction.action({ callback: function (error, data) {\r\n                        Object.keys(data).forEach(function (key) {\r\n                            if(!context.dictionary && !context.data) {\r\n                                console.warn('Using a registered input when no data/dictionary available in context', node);\r\n                                return;\r\n                            }\r\n                            var node = context.dictionary && context.dictionary()[key];\r\n                            if (node && node.update) {\r\n                                node.update(data[key]);\r\n                            } else if (context.data && has(data[key], 'value')) {\r\n                                context.data()[key] = data[key].value;\r\n                            }\r\n                        });\r\n                    }});\r\n                }\r\n            });\r\n        }\r\n\r\n        // add validations to the inputvalue\r\n        validations = merge(_.cloneDeep(options.validations), { customError:  customError });\r\n        if (validations.expression) {\r\n            validations.expression.params = [\r\n                options.validations.expression.message ?\r\n                    options.validations.expression.term\r\n                    : options.validations.expression,\r\n                context.getValue\r\n            ]\r\n        }\r\n        if(viewmodel.validations) {\r\n            validations = merge(validations, viewmodel.validations);\r\n        }\r\n        inputValue = inputValue.extend(validations);\r\n\r\n        // specific setValueFunc for checkboxList\r\n        setValueFuncs = {\r\n            checkboxList: function (data) {\r\n                if(Array.isArray(data.value)) {\r\n                    inputValue(data.value);\r\n                } else if(data.value !== null && data.value !== undefined) {\r\n                    inputValue([data.value]);\r\n                } else {\r\n                    inputValue([]);\r\n                }\r\n            }\r\n        };\r\n\r\n        // visible binding using expressions and context's getValue func\r\n        if (has(node.visible)) {\r\n            is(node.visible, 'boolean') ? isShown(node.visible) : (visible = computed(function() {\r\n                return evaluate(node.visible, context.getValue || function () {\r\n                    console.error('Cannot use visible binding without context get value', node);\r\n                });\r\n            }));\r\n            // isShown is an observable that can be updated by rules so when visible changes so must isShown\r\n            isShown(visible());\r\n            visible.subscribe(isShown);\r\n        }\r\n\r\n        // allows us to set values on an input from expression\r\n        // usecase: issuerId coming from noticeboard\r\n        if (options.valueExpression) {\r\n            computedValueExpression = computed(function () {\r\n                if (options.allowSet === false) {\r\n                    inputValue(); // re-eval when inputValue is set\r\n                }\r\n                return evaluate(options.valueExpression, context.getValue);\r\n            });\r\n            setValue(computedValueExpression());\r\n            computedValueExpression.subscribe(function(value) {\r\n                setValue(value);\r\n            });\r\n            subs.push(computedValueExpression)\r\n        }\r\n        \r\n        if (get(options, 'pattern.alias') === 'percent') {\r\n            inputValue.subscribe(function (value) {\r\n                if(value && isFinite(Number(value))) {\r\n                    inputValue(Number(value).toFixed(3));\r\n                }\r\n            });\r\n        }\r\n\r\n        shake.subscribe(function(){\r\n            if(shake()) {\r\n                setTimeout(shake.bind(null,false), 1000);\r\n            }\r\n        });\r\n\r\n        return merge(node, viewmodel, {\r\n            inputValue: inputValue,\r\n            values: viewmodel.values || values,\r\n            visibleMessage: visibleMessage,\r\n            customError: customError,\r\n            hasFocus: hasFocus,\r\n            hover: hover,\r\n            datePlaceholder: datePlaceholder,\r\n            assignDate: assignDate,\r\n            setDisabled: setDisabled,\r\n            isShown: isShown,\r\n            required: required,\r\n            readonly: readonly,\r\n            setReadonly: viewmodel.setReadonly || setReadonly,\r\n            disabled: disabled,\r\n            maxlength: maxlength,\r\n            pattern: pattern,\r\n            tooltipShown: tooltipShown,\r\n            shake: shake,\r\n            validate: viewmodel.validate || validate,\r\n            options: options,\r\n            context: this,\r\n            error: inputValue.error,\r\n            getValue: viewmodel.getValue || getValue,\r\n            setValue: setValue,\r\n            update: update,\r\n            dispose: function () {\r\n                if(viewmodel.dispose) {\r\n                    viewmodel.dispose();\r\n                }\r\n                (subs || []).forEach(function(sub) {\r\n                    sub.dispose && sub.dispose();\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n"]}