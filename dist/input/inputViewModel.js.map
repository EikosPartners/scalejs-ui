{"version":3,"sources":["../../src/input/inputViewModel.js"],"names":[],"mappings":"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","file":"inputViewModel.js","sourcesContent":["import autocompleteViewModel from './autocomplete/autocompleteViewModel';\nimport selectViewModel from './select/selectViewModel';\nimport dataservice from 'dataservice';\nimport sandbox from 'scalejs.sandbox';\nimport moment from 'moment';\nimport ko from 'knockout';\nimport _ from 'lodash';\n\nimport {\n    observable,\n    observableArray,\n    computed\n} from 'scalejs.mvvm';\n\nvar evaluate = sandbox.expression.evaluate,\n    has = sandbox.object.has,\n    get = sandbox.object.get,\n    is = sandbox.type.is,\n    merge = sandbox.object.merge;\n\n\nvar inputTypes = {\n    autocomplete: autocompleteViewModel,\n    select: selectViewModel\n}\n\nexport default function inputViewModel(node) {\n    var // metadata node + context\n        options = node.options || {},\n        keyMap = node.keyMap || {},\n        context = this || {},\n\n        // inputValue: accepts user input via KO Binding\n        inputValue = createInputValue(),\n\n        // values which can be chosen from\n        values = observableArray(Array.isArray(options.values) ? options.values : []),\n\n        // Depricated?\n        isShown = observable(!node.hidden),\n\n        // 2-way binding with state of focus\n        hasFocus = observable(),\n\n        // 1-way binding with state of hover            \n        hover = observable(),\n\n        // validations\n        validations = options.validations || null,\n        required = validations ? validations.required : false,\n        customError = observable(),\n\n        // attributes\n        disabled = observable(!!options.disabled),\n        readonly = observable(!!options.readonly),\n        maxlength = validations && validations.maxLength,\n\n        // patterns\n        pattern = options.pattern === true ? getPattern() : options.pattern,\n        tooltipShown = observable(false), //for patterns\n        shake = observable(false),\n\n        //specific datepicker\n        datePlaceholder = node.inputType === 'datepicker' && ko.pureComputed(function () {\n            var placeholder = !hover() || hasFocus() ? '' : 'mm/dd/yyyy';\n            return placeholder;\n        }),\n\n        // custom setValue functions for input types                        \n        setValueFuncs = {\n            checkboxList: setCheckboxListValue\n        },\n\n        // subs disposable array\n        subs = [],\n\n        // how can we define these more clearly / better? Block Scope?\n        wasModified, //Needed?\n        computedValueExpression, //Needed?\n        registeredAction, //Needed?\n\n        // move out to sandbox?\n        formatters = {\n            dateFormatter: dateFormatter\n        },\n        format = options.values && options.values.textFormatter ? formatters[options.values.textFormatter] : _.identity,\n\n        // BaseViewModel to be passed to Mixins\n        viewmodel = {\n            mapItem: mapItem,\n            inputValue: inputValue,\n            hasFocus: hasFocus,\n            format: format,\n            subs: subs,\n            readonly: readonly\n        };\n\n    /*\n     * PJSON API (refine)\n     */\n    function getValue() {\n        return inputValue() || '';\n    }\n\n    function setValue(data) {\n        var value = is(data, 'object') ? data.value : data,  // TODO: Refactor - should only accept \"value\", not \"data\".\n            wasModifed = inputValue.isModified();\n           \n         // uses setValueFunc if defined, else updates inputValue\n        if (setValueFuncs[node.inputType]) {\n            setValueFuncs[node.inputType](data);\n        } else if (viewmodel.setValue) {\n            viewmodel.setValue(data);\n        } else {\n            inputValue(value);\n        }\n\n        // programtically setting the inputValue will not cause isModified to become true\n        if (!wasModifed) { inputValue.isModified(false); }\n    }\n\n    function update(data) {\n        if (data.hasOwnProperty('value')) {\n            setValue(data.value);\n        }\n        if (data.hasOwnProperty('ErrorMessage')) {\n            customError(data.ErrorMessage);\n        }\n    }\n\n    function validate() {\n        console.error('Relying on \"this\" for rendered in validate. REFACTOR');\n        inputValue.isModified(true);\n        return !inputValue.isValid() && isShown() && this.rendered() && inputValue.severity() === 1;\n    }\n\n    function visibleMessage() {\n        // returns the message to be displayed (based on validations)\n        var inputMessage, message,\n            severity = inputValue.severity();\n\n        if (!inputValue.isModified() || inputValue.isValid() || !this.rendered() || !isShown()) {\n            // the user has yet to modify the input\n            // or there is no message. return nothing\n            return;\n        }\n\n        inputMessage = inputValue.error();\n        inputMessage = inputMessage[inputMessage.length - 1] === '.' ? inputMessage : inputMessage + '.';\n\n        if (inputMessage === 'Required.') {\n            message = (node.errorLabel || node.label) + ' is required.';\n        } else {\n            message = (node.errorLabel || node.label) + ' is invalid. ' + inputMessage;\n        }\n\n        return {\n            message,\n            severity,\n            onClick() {\n                hasFocus(true);\n            }\n        };\n    }\n\n    /*\n     * Rule Engine (todo - Refactor out)\n     */\n\n    function assignDate(value, params) {\n        if (!is(params, 'object')) {\n            console.error('Assign date only supports object params', params);\n            return;\n        }\n        var newDate = moment(value).add(params).format(options.rawFormat || 'YYYY-MM-DD');\n        setValue(newDate);\n    }\n\n    function setDisabled(value) {\n        if (value === 'toggle') {\n            disabled(!disabled());\n            return;\n        }\n        disabled(value);\n    }\n\n    function setReadonly(bool) {\n        readonly(bool)\n    }\n\n    function setCheckboxListValue(data) {\n        if (Array.isArray(data.value)) {\n            inputValue(data.value);\n        } else if (data.value !== null && data.value !== undefined) {\n            inputValue([data.value]);\n        } else {\n            inputValue([]);\n        }\n    }\n\n    /*\n     * Internal\n     */\n    function createInputValue() {\n        // checkboxList can have multiple answers so make it an array\n        if (node.inputType === 'checkboxList') {\n            return observableArray(options.value || []);\n        } else {\n            // if there is no initial value, set it to empty string,\n            // so that isModified does not get triggered for empty dropdowns\n            return observable(has(options.value) ? options.value : '');\n        }\n    }\n\n\n    function getPattern() {\n        // implicitly determine pattern (inputmask) if there is a Regex validation\n        if (validations && validations.pattern) {\n            return {\n                alias: 'Regex',\n                regex: validations.pattern.params\n            };\n        }\n    }\n\n    /*\n     * Utils (can be Refactored to common)\n     */\n\n    function dateFormatter(date) {\n        return moment(date).format('MM/DD/YYYY');\n    }\n\n    function mapItem(mapper) {\n        var textKey = Array.isArray(mapper.textKey) ? mapper.textKey : [mapper.textKey],\n            valueKey = Array.isArray(mapper.valueKey) ? mapper.valueKey : [mapper.valueKey],\n            textFormatter = formatters[mapper.textFormatter] || _.identity,\n            delimeter = mapper.delimeter || ' / ';\n\n        return function (val) {\n            return {\n                text: textFormatter(\n                    textKey.map((k) => { val[k]; }).join(delimiter)\n                ),\n                value: valueKey.map((k) => { return val[k]; }).join(delimeter),\n                original: val\n            }\n        }\n    }\n\n\n    /*\n     * Init\n     */\n\n    // Mixin the viewModel specific to the inputType\n    if (inputTypes[node.inputType]) {\n        extend(viewmodel, inputTypes[node.inputType].call(context, node, viewmodel));\n    }\n\n    // Checkbox underlying value is Array because of knockout, maybe refactor to a custom binding?\n    if (node.inputType === 'checkbox') {\n        values.subscribe((newValues) => {\n            if (newValues.indexOf(options.checked) !== -1) {\n                inputValue(options.checked);\n            } else {\n                inputValue(options.unchecked);\n            }\n        });\n        if (inputValue() === options.checked) {\n            values.push(options.checked);\n        }\n    }\n\n    // TODO: Specific to data, move into custom viewModel?\n    // make min/max date into observables\n    if (options.minDate) {\n        viewmodel.minDate = ko.observable(options.minDate);\n    }\n    if (options.maxDate) {\n        viewmodel.maxDate = ko.observable(options.maxDate);\n    }\n\n    // Is this needed in the common? Should it be a plugin/mixin?\n    if (options.registered) {\n        registeredAction = sandbox.metadataFactory.createViewModel.call(this, {\n            type: 'action',\n            actionType: 'ajax',\n            options: merge(options.registered, { data: {} })\n        });\n\n        inputValue.subscribe(function (newValue) {\n            registeredAction.options.data[node.id] = newValue; //our own sub gets called before context is updated\n            if (newValue !== '') {\n                registeredAction.action({\n                    callback: (error, data) => {\n                        Object.keys(data).forEach((key) => {\n                            if (!context.dictionary && !context.data) {\n                                console.warn('Using a registered input when no data/dictionary available in context', node);\n                                return;\n                            }\n                            var node = context.dictionary && context.dictionary()[key];\n                            if (node && node.update) {\n                                node.update(data[key]);\n                            } else if (context.data && has(data[key], 'value')) {\n                                context.data()[key] = data[key].value;\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    // TODO: Clean up validation Code \n    // add validations to the inputvalue\n    validations = merge(_.cloneDeep(options.validations), { customError: customError });\n    if (validations.expression) {\n        validations.expression.params = [\n            options.validations.expression.message ?\n                options.validations.expression.term\n                : options.validations.expression,\n            context.getValue\n        ]\n    }\n    if (viewmodel.validations) {\n        validations = merge(validations, viewmodel.validations);\n    }\n    inputValue = inputValue.extend(validations);\n\n    // allows us to set values on an input from expression\n    // usecase: issuerId coming from noticeboard\n    if (options.valueExpression) {\n        computedValueExpression = computed(() => {\n            if (options.allowSet === false) {\n                inputValue(); // re-eval when inputValue is set\n            }\n            return evaluate(options.valueExpression, context.getValue);\n        });\n        setValue(computedValueExpression());\n        computedValueExpression.subscribe(setValue(value));\n        subs.push(computedValueExpression)\n    }\n\n    // Insert Zeros Option?\n    if (get(options, 'pattern.alias') === 'percent') {\n        inputValue.subscribe((value) => {\n            if (value && isFinite(Number(value))) {\n                inputValue(Number(value).toFixed(3));\n            }\n        });\n    }\n\n    shake.subscribe((shook) => {\n        shook && setTimeout(() => {\n            shake(false);\n        }, 1000);\n    });\n\n\n    return merge(node, viewmodel, {\n        inputValue,\n        visibleMessage,\n        customError,\n        hasFocus,\n        hover,\n        datePlaceholder,\n        assignDate,\n        setDisabled,\n        isShown,\n        required,\n        readonly,\n        disabled,\n        maxlength,\n        pattern,\n        tooltipShown,\n        shake,\n        options,\n        setValue,\n        update,\n        context: this,\n        error: inputValue.error,\n\n        // Mixin-Overrides        \n        getValue: viewmodel.getValue || getValue,\n        values: viewmodel.values || values,\n        setReadonly: viewmodel.setReadonly || setReadonly,\n        validate: viewmodel.validate || validate,\n\n        dispose: function () {\n            if (viewmodel.dispose) {\n                viewmodel.dispose();\n            }\n            //sandbox.utils.disposalAll(subs)(); TODO\n            (subs || []).forEach(function (sub) {\n                sub.dispose && sub.dispose();\n            });\n        }\n    });\n};\n\n\n\n    // implements an input of type\n    // text, select, date, radio, checkbox, checkboxList   \n\n    //TODO: Refactor Session\n    //- createJSDocs\n    //- revisit and de-tangle bindings\n    //- refactor validations so that the tooltip works without inputText wrapper in the inputType template\n    //- remove knockout require\n    //- move dataservice to sandbox\n    //- move tooltip/helpText in options\n    //- move tooltip into pattern object (if pattern is true, use message from validation obj)\n    //\n    // ...add more refactor session goals here!\n\n    /**\n     *  input is the component to use when accepting user-input.\n     *  This is the best way to create an interactive UI and\n     *  autogenerate your underlying data model by using an adapter in the parent chain.\n     *\n     * @module input\n     *\n     * @param {object} node\n     *  The configuration specs for the component.\n     * @param {string} [node.id]\n     *  By specifying an \"id\" on your input, you are automatically adding your input's data to the data context model.\n     * @param {object} node.options\n     *  The options pertaining to your specific inputType\n     * @param {array} [node.options.values]\n     *  The values that can be chosen from for inputTypes that have selections (e.g. radio, checkboxList)\n     * @param {boolean} [node.hidden=false]\n     *  Whether or not to hide the input\n     * @param {object} [node.options.validations]\n     *  KO validations object to validate the inputValue\n     * @param {boolean} [node.options.validations.required]\n     *  Required validation for ko - also will show * next to label indicating it is required\n     * @param {boolean} [node.options.disabled]\n     *  Disables the input\n     * @param {object|string|boolean} [node.options.pattern]\n     *  Sets an inputmask for the input. If a string, this is the mask. If an object, gets passed as is.\n     *  If boolean = true, uses pattern validation.\n     */"]}