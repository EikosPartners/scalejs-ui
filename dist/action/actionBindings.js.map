{"version":3,"sources":["../../src/action/actionBindings.js"],"names":[],"mappings":";;;;;;kBACe;AACX,qBAAiB,wBAAY;AACzB,YAAI,UAAU,KAAK,aAAL,IAAsB,EAApC;;AAEA,YAAI,KAAK,IAAT,EAAe;AACX,uBAAW,YAAY,KAAK,IAA5B;AACH;;AAED,eAAO;AACH,mBAAO,iBAAW;AACd,qBAAK,MAAL;AACH,aAHE;AAIH,iBAAK;AAJF,SAAP;AAMH,KAdU;AAeX,kCAA8B,iCAAU,GAAV,EAAe;AACzC,gBAAQ,GAAR,CAAY,WAAZ,EAAyB,GAAzB;AACH,KAjBU;AAkBX,gCAA4B,gCAAW,GAAX,EAAiB;;;;AAI3C,YAAI,kBAAkB,IAAI,KAAJ,CAAU,eAAhC;AAAA,YACI,UAAU,IAAI,KAAJ,CAAU,OADxB;;AAGA,eAAO;AACH,iBAAK,IAAI,KAAJ,CAAU,OADZ;AAEH,qBAAS,CAAC,gBAAgB,CAAhB,MAAuB,GAAvB,GAA6B,CAAC,QAAQ,gBAAgB,KAAhB,CAAsB,CAAtB,CAAR,GAA9B,GAAoE,QAAQ,eAAR,GAArE,KAAoG,IAAI,KAAJ,CAAU,OAAV,EAF1G;AAGH,sBAAU,oBAAY;AAClB,oBAAI,KAAJ,CAAU,OAAV,CAAkB,QAAlB,IAA8B,IAAI,KAAJ,CAAU,OAAV,CAAkB,QAAlB,CAA2B,YAAzD,IAAyE,IAAI,KAAJ,CAAU,OAAV,CAAkB,QAAlB,CAA2B,YAA3B,CAAwC,KAAxC,CAAzE;AACH;AALE,SAAP;AAOD,KAhCU;AAiCX,2BAAuB,2BAAW,GAAX,EAAiB;AACpC,YAAI,YAAY,IAAI,QAAJ,CAAa,MAAb,CAAoB,UAAS,MAAT,EAAiB;AACjD,mBAAO,OAAO,SAAd;AACH,SAFe,EAEb,CAFa,EAEV,SAFN;AAAA,YAGI,UAAU,KAAK,OAAL,IAAgB,EAH9B;;AAKA,eAAO;AACH,mBAAO,iBAAW;AACd;AACA,qBAAK,MAAL;AACH,aAJE;AAKH,kBAAM,KAAK,IALR;AAMH,iBAAK;AANF,SAAP;AAQH,KA/CU;AAgDX,uBAAmB,wBAAU,GAAV,EAAe;AAC9B,YAAI,UAAU,KAAK,OAAnB;AAAA,YACI,iBAAiB,KAAK,cAD1B;AAAA,YAEI,UAAU,KAAK,OAFnB;AAAA,YAGI,GAHJ;;AAKA,YAAI,kBAAkB,CAAC,OAAvB,EAAgC;AAC5B,oBAAQ,KAAR,CAAc,wEAAd;AACH;;AAED,YAAI,cAAJ,EAAoB;AAChB,kBAAM,SAAS,YAAY;AACvB,uBAAO,OAAO,IAAP,CAAY,cAAZ,EAA4B,MAA5B,CAAmC,UAAU,GAAV,EAAe,SAAf,EAA0B;AAChE,wBAAI,aAAa,SAAS,eAAe,SAAf,CAAT,EAAoC,UAAS,UAAT,EAAqB;AACtE,+BAAO,GAAG,MAAH,CAAU,QAAQ,UAAR,CAAV,CAAP;AACH,qBAFgB,CAAjB;AAGA,wBAAI,UAAJ,EAAgB;AACZ,+BAAO,MAAM,SAAb;AACH;AACD,2BAAO,GAAP;AACH,iBARM,EAQJ,WAAW,EARP,CAAP;AASH,aAVK,EAUH,IAVG,CAAN;AAWH,SAZD,MAYO;AACH,kBAAM,OAAN;AACH;;AAED,eAAO;AACH,iBAAK;AADF,SAAP;AAGH;AA7EU,C","file":"actionBindings.js","sourcesContent":["/*global define */\nexport default {\n    'action-button': function () {\n        var classes = this.buttonClasses || '';\n\n        if (this.icon) {\n            classes += ' fa fa-' + this.icon;\n        }\n\n        return {\n            click: function() {\n                this.action();\n            },\n            css: classes\n        }\n    },\n    'action-row-dropdown-button': function (ctx) {\n        console.log('context: ', ctx);\n    },\n    'action-contextvis-button': function ( ctx ) {\n      // property to bind visibility to in context.\n      // this can be provided with a bang in front and it will parse correctly\n      // as the opposite of the context property\n      var contextProperty = ctx.$data.contextProperty,\n          context = ctx.$data.context;\n\n      return {\n          css: ctx.$data.classes,\n          visible: (contextProperty[0] === '!' ? !context[contextProperty.slice(1)]() : context[contextProperty]()) && ctx.$data.isShown(),\n          clickOff: function () {\n              ctx.$data.options.dropdown && ctx.$data.options.dropdown.showDropdown && ctx.$data.options.dropdown.showDropdown(false);\n          }\n      }\n    },\n    'action-popup-action': function ( ctx ) {\n        var hidePopup = ctx.$parents.filter(function(parent) {\n            return parent.hidePopup\n        })[0].hidePopup,\n            classes = this.classes || '';\n\n        return {\n            click: function (){\n                hidePopup();\n                this.action();\n            },\n            text: this.text,\n            css: classes\n        }\n    },\n    'classes-binding': function (ctx) {\n        var context = this.context,\n            classesBinding = this.classesBinding,\n            classes = this.classes,\n            css;\n\n        if (classesBinding && !context) {\n            console.error('You cannot define a classes binding expression without passing context');\n        }\n\n        if (classesBinding) {\n            css = computed(function () {\n                return Object.keys(classesBinding).reduce(function (cls, className) {\n                    var applyClass = evaluate(classesBinding[className], function(identifier) {\n                        return ko.unwrap(context[identifier]);\n                    });\n                    if (applyClass) {\n                        cls += ' ' + className\n                    }\n                    return cls;\n                }, classes || '');\n            }, this);\n        } else {\n            css = classes;\n        }\n\n        return {\n            css: css\n        };\n    }\n}\n"]}