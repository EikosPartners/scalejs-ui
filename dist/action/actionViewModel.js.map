{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":[],"mappings":";;;;;kBAiBwB,e;;AAhBxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAI,QAAQ,kBAAK,MAAL,CAAY,KAAxB;AAAA,IACI,aAAa,mBAAG,UADpB;AAAA,IAEI,SAAS,mBAAG,MAFhB;AAAA,IAGI,MAAM,kBAAK,MAAL,CAAY,GAHtB,C;;;AAKA,kBAAK,IAAL,CAAU,iBAAV;AACA,kBAAK,IAAL,CAAU,gBAAV;;AAEe,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC1C,QAAI,oBAAoB,yCAAxB;AAAA,QACI,UAAU,IADd;AAAA,QAEI,OAAO,KAAK,IAAL,IAAa,KAAK,OAAL,CAAa,IAFrC;AAAA,QAGI,kBAAkB,kBAAK,eAAL,CAAqB,eAArB,CAAqC,IAArC,CAA0C,OAA1C,CAHtB;AAAA,QAII,WAAW,KAAK,QAJpB;AAAA,QAKI,UAAU,KAAK,OAAL,IAAgB,EAL9B;AAAA,QAMI,aAAa,KAAK,UANtB;AAAA,QAOI,UAAU,EAPd;AAAA,QAQI,gBAAgB,kBAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,EAA4B,iBAA5B,CARpB;AAAA,QASI,aAAa,cAAc,UAAd,KAA6B,cAAc,UAAd,EAA0B,IAA1B,CAA+B,OAA/B,CAA7B,IAAwE,IATzF;AAAA,QAUI,UAAU,WAAW,IAAX,CAVd;AAAA,QAWI,WAAW,WAAW,IAAI,QAAQ,QAAZ,IAAwB,QAAQ,QAAhC,GAA2C,KAAtD,CAXf;;AAcA,aAAS,MAAT,CAAgB,IAAhB,EAAsB;;AAElB,YAAI,CAAC,UAAL,EAAgB;AACZ,oBAAQ,KAAR,CAAc,2BAAd,EAA2C,IAA3C;AACA;AACH;;AAED,YAAI,QAAJ,EAAc;AACV,kCAAO,QAAP,EAAiB;AACb,iCAAiB,2BAAY;AACzB,+BAAW,OAAX,EAAoB,IAApB;AACH;AAHY,aAAjB;AAKH,SAND,MAMO;AACH,uBAAW,OAAX,EAAoB,IAApB;AACH;AACJ;;AAED,QAAI,KAAK,SAAT,EAAoB;AAChB;AACA;AACH;;AAED,WAAO,MAAM,IAAN,EAAY;AACf,iBAAS,OADM;AAEf,gBAAQ,MAFO;AAGf,cAAM,IAHS;AAIf,oBAAY,UAJG;AAKf,iBAAS,OALM;AAMf,kBAAU,QANK;AAOf,iBAAS;AAPM,KAAZ,CAAP;AAUH","file":"actionViewModel.js","sourcesContent":["/*global define, ko, core, view, binding */\r\nimport core from 'scalejs.core';\r\nimport ko from 'knockout';\r\nimport view from './action.html';\r\nimport binding from './actionBindings.js';\r\nimport 'scalejs.mvvm';\r\nimport { getRegisteredActions } from './actionModule';\r\nimport { notify } from 'scalejs.messagebus';\r\n\r\nlet merge = core.object.merge,\r\n    observable = ko.observable,\r\n    unwrap = ko.unwrap,\r\n    has = core.object.has;\r\n\r\ncore.mvvm.registerTemplates(view);\r\ncore.mvvm.registerBindings(binding);\r\n\r\nexport default function actionViewModel(node) {\r\n    let registeredActions = getRegisteredActions(),\r\n        context = this,        \r\n        text = node.text || node.options.text,\r\n        createViewModel = core.metadataFactory.createViewModel.bind(context),\r\n        validate = node.validate,\r\n        options = node.options || {},\r\n        actionType = node.actionType,\r\n        actions = {},\r\n        mergedActions = core.object.extend(actions, registeredActions),\r\n        actionFunc = mergedActions[actionType] && mergedActions[actionType].bind(context) || null ,\r\n        isShown = observable(true),\r\n        disabled = observable(has(options.disabled) ? options.disabled : false);\r\n        \r\n\r\n    function action(args) {\r\n        \r\n        if (!actionFunc){\r\n            console.error('actionType is not defined', node);\r\n            return;\r\n        }\r\n\r\n        if (validate) {\r\n            notify(validate, {\r\n                successCallback: function () {\r\n                    actionFunc(options, args);\r\n                }\r\n            });\r\n        } else {\r\n            actionFunc(options, args);\r\n        }\r\n    }\r\n\r\n    if (node.immediate) {\r\n        action();\r\n        return;\r\n    }\r\n\r\n    return merge(node, {\r\n        isShown: isShown,\r\n        action: action,\r\n        text: text,\r\n        actionType: actionType,\r\n        options: options,\r\n        disabled: disabled,\r\n        context: context\r\n    });\r\n\r\n};\r\n\r\n"]}