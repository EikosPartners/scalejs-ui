{"version":3,"sources":["../../src/action/actionViewModel.js"],"names":[],"mappings":";;;;;kBAOwB,e;;AAPxB;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,SAAS,eAAT,CAAyB,IAAzB,EAA+B;AAC1C,QAAI,oBAAoB,yCAAxB;AAAA,QACI,UAAU,IADd;AAAA,QAEI,OAAO,KAAK,IAAL,IAAa,KAAK,OAAL,CAAa,IAFrC;AAAA,QAGI,kBAAkB,yBAAS,IAAT,CAAc,OAAd,CAHtB;AAAA,QAII,WAAW,KAAK,QAJpB;AAAA,QAKI,UAAU,KAAK,OAAL,IAAgB,EAL9B;AAAA,QAMI,aAAa,KAAK,UANtB;AAAA,QAOI,UAAU,EAPd;AAAA,QAQI,gBAAgB,oBAAO,OAAP,EAAgB,iBAAhB,CARpB;AAAA,QASI,aAAa,cAAc,UAAd,KAA6B,cAAc,UAAd,EAA0B,IAA1B,CAA+B,OAA/B,CAA7B,IAAwE,IATzF;AAAA,QAUI,UAAU,0BAAW,IAAX,CAVd;AAAA,QAWI,WAAW,0BAAW,mBAAI,QAAQ,QAAZ,IAAwB,QAAQ,QAAhC,GAA2C,KAAtD,CAXf;;AAcA,aAAS,MAAT,CAAgB,IAAhB,EAAsB;;AAElB,YAAI,CAAC,UAAL,EAAgB;AACZ,oBAAQ,KAAR,CAAc,2BAAd,EAA2C,IAA3C;AACA;AACH;;AAED,YAAI,QAAJ,EAAc;AACV,kCAAO,QAAP,EAAiB;AACb,iCAAiB,2BAAY;AACzB,+BAAW,OAAX,EAAoB,IAApB;AACH;AAHY,aAAjB;AAKH,SAND,MAMO;AACH,uBAAW,OAAX,EAAoB,IAApB;AACH;AACJ;;AAED,QAAI,KAAK,SAAT,EAAoB;AAChB;AACA;AACH;;AAED,WAAO,qBAAM,IAAN,EAAY;AACf,iBAAS,OADM;AAEf,gBAAQ,MAFO;AAGf,cAAM,IAHS;AAIf,oBAAY,UAJG;AAKf,iBAAS,OALM;AAMf,kBAAU,QANK;AAOf,iBAAS;AAPM,KAAZ,CAAP;AAUH","file":"actionViewModel.js","sourcesContent":["import { createViewModel as createVM } from 'scalejs.metadataFactory';\nimport { getRegisteredActions } from './actionModule';\nimport { observable, unwrap } from 'knockout';\nimport { notify } from 'scalejs.messagebus';\nimport { merge, has } from 'scalejs';\nimport { extend } from 'lodash';\n\nexport default function actionViewModel(node) {\n    let registeredActions = getRegisteredActions(),\n        context = this,        \n        text = node.text || node.options.text,\n        createViewModel = createVM.bind(context),\n        validate = node.validate,\n        options = node.options || {},\n        actionType = node.actionType,\n        actions = {},\n        mergedActions = extend(actions, registeredActions),\n        actionFunc = mergedActions[actionType] && mergedActions[actionType].bind(context) || null ,\n        isShown = observable(true),\n        disabled = observable(has(options.disabled) ? options.disabled : false);\n        \n\n    function action(args) {\n        \n        if (!actionFunc){\n            console.error('actionType is not defined', node);\n            return;\n        }\n\n        if (validate) {\n            notify(validate, {\n                successCallback: function () {\n                    actionFunc(options, args);\n                }\n            });\n        } else {\n            actionFunc(options, args);\n        }\n    }\n\n    if (node.immediate) {\n        action();\n        return;\n    }\n\n    return merge(node, {\n        isShown: isShown,\n        action: action,\n        text: text,\n        actionType: actionType,\n        options: options,\n        disabled: disabled,\n        context: context\n    });\n\n};\n\n"]}