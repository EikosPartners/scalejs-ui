{"version":3,"sources":["../../src/listAdvanced/listAdvancedViewModel.js"],"names":[],"mappings":"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","file":"listAdvancedViewModel.js","sourcesContent":["/*global define, sandbox, ko */\nimport sandbox from 'scalejs.sandbox';\nimport ko from 'knockout';\nimport { notify } from 'scalejs.messagebus';\nimport { createViewModel } from 'scalejs.metadataFactory';\n\n    // the list advanced component provides advanced features over the base list\n    // - Headers (TBD) and Footers (partially done)\n    // - ListItems such as ADD and EMPTY\n    // - GroupBy\n    var evaluate = sandbox.expression.evaluate,\n        computed = sandbox.mvvm.computed,\n        is = sandbox.type.is,\n        has = sandbox.object.has,\n        unwrap = ko.unwrap,\n        observable = sandbox.mvvm.observable,\n        observableArray = sandbox.mvvm.observableArray,\n        merge = sandbox.object.merge,\n        pureComputed = ko.pureComputed,\n        listItems = {\n            ADD: add,\n            EMPTY: empty,\n            TEXT: text,\n            TOTAL: total\n        }\n\n    // creates the Add ViewModel from the add def\n    function add(addDef, list) {\n        return merge({\n            template: 'list_advanced_add_item_template',\n            text: 'Add',\n            add: function () {\n                var lastRow = list.lastRow(),\n                    initialItems = {};\n\n                // autpopulate\n                // an array containing the items which should be autopopulated with the last row's values\n                if (addDef.autopopulate) {\n                    addDef.autopopulate.forEach(function (prop) {\n                        var lastProp = lastRow.itemDictionary()[prop];\n                        initialItems[prop] = lastProp.getValue();\n                    });\n                }\n\n                // increment\n                // a string indicating which property to incremement upon add\n                if (addDef.increment) {\n                    (Array.isArray(addDef.increment) ? addDef.increment : [addDef.increment]).forEach(function(prop) {\n                        initialItems[prop] = Number(lastRow.itemDictionary()[prop].getValue())+1;\n                    });\n                }\n\n                // defaults\n                // sets the value of an item to a default value\n                if (addDef.defaults) {\n                    Object.keys(addDef.defaults).forEach(function(key) {\n                        initialItems[key] = addDef.defaults[key]\n                    });\n                }\n\n                // creates new item in list\n                list.add(initialItems);\n            }\n        }, addDef)\n    }\n\n    // creates an empty space in table\n    function empty(emptyDef, base) {\n        return merge({\n            template: 'list_advanced_empty_item_template',\n            cellClasses: 'empty'\n        }, emptyDef);\n    }\n\n    function text(textDef, base) {\n        return merge({\n            template: 'list_advanced_text_item_template'\n        }, textDef)\n    }\n\n    function total(totalDef, list) {\n        // create a input vm\n        var totalJson = {\n                id: totalDef.id,\n                type: 'input',\n                inputType: 'text',\n                label: 'Total',\n                cellClasses: totalDef.cellClasses,\n                options: merge({\n                    readonly: true\n                }, totalDef.options)\n            },\n            // use input view model for instant formatting/validation\n            totalViewModel = sandbox.metadataFactory.createViewModel.call(this, totalJson),\n            total = computed(function () {\n                return list.rows().reduce(function (sum, row) {\n                    return sum + Number(row[totalDef.field]() || 0) // get the value for field\n                }, 0)\n            });\n\n        total.subscribe(function (sum) {\n            totalViewModel.setValue(sum.toFixed(2));\n        });\n\n        // adding totals to the dictionary from the context\n        if (totalDef.id) {\n            this.dictionary()[totalDef.id] = totalViewModel;\n            //this.dictionary.valueHasMutated();\n        }\n\n        return totalViewModel;\n    }\n\n    export default function (node) {\n        var createViewModel = createViewModel.bind(this),\n            context = this,\n            itemDictionary = observable({}),\n            listViewModel = createViewModel(merge({ id: node.id }, node.list)), // pass along id\n            headers = (node.headers || []).map(function (header) {\n                return {\n                    items: header.items.map(function (item) {\n                        if (listItems[item.type]) {\n                            return listItems[item.type].call(this, item, listViewModel);\n                        }\n                    })\n                }\n            }),\n            headerItems = (node.list.items || []).map(function (header) {\n                var classes = [];\n\n                if (header.id) {\n                    classes.push(header.id);\n                }\n                if (header.headerClasses) {\n                    classes.push(header.headerClasses);\n                }\n                return {\n                    text: header.label,\n                    classes: classes.join(' '),\n                    hidden: header.hidden\n                };\n            }),\n            footers = (node.footers || []).map(function (footer) {\n                var items, visible = true;\n\n                // maps footer item defs\n                items = footer.items.map(function (item) {\n                    if (listItems[item.type]) {\n                        return listItems[item.type].call(context, item, listViewModel);\n                    } else {\n                        return sandbox.metadataFactory.createViewModel.call({\n                            metadata: context.metadata,\n                            getValue: function (id) {\n                                var item = itemDictionary()[id];\n                                if (item && item.getValue) {\n                                    return item.getValue();\n                                }\n                                return context.getValue(id);\n                            }\n                        }, item)\n                    }\n                });\n\n                items.forEach(function (item) {\n                    if (item.id) {\n                        // add to dictionary for accessibility from expressions\n                        itemDictionary()[item.id] = item;\n                        itemDictionary.valueHasMutated();\n                    }\n                })\n\n                // creates expression binding for visible\n                if (has(footer.visible)) {\n                    visible = is(footer.visible, 'boolean') ? footer.visible : pureComputed(function() {\n                        return evaluate(footer.visible, function (id) {\n                            if (id === 'list') {\n                                return listViewModel.rows() || []\n                            }\n\n                            if (id === 'dict') {\n                                return itemDictionary();\n                            }\n\n                            if (id === 'readonly') {\n                                return context.readonly()\n                            }\n\n                            var item = itemDictionary()[id];\n                            if (item) {\n                                return item;\n                            }\n                            console.log(id);\n                            // returning empty string within string as catch all for evaluate function\n                            return '\"\"';\n                        });\n                    });\n                }\n\n                return  merge(footer, {\n                    items: items,\n                    visible: visible\n                });\n            }),\n            groups,\n            visibleRows = observableArray(),\n            viewmodel,\n            showInfinite;\n\n       // Updates rows within the list with additional properties in regards to their group\n       // all subscribers are notified\n       function updateRowsWithGroupValues(groupDict) {\n            Object.keys(groupDict).forEach(function(group) {\n                var groupArray = groupDict[group];\n                groupArray.forEach(function(row, index) {\n                    row.itemDictionary().group = groupArray;\n                    row.itemDictionary().groupIndex =index;\n                    row.itemDictionary.valueHasMutated();\n                })\n            });\n       }\n\n       // will group the nodes based on groupby prop\n       if (node.groupBy) {\n           groups = computed(function () {\n               var groupDict = {};\n               listViewModel.rows().forEach(function(row) {\n                   var group = unwrap(row[node.groupBy]);\n                   groupDict[group] = groupDict[group] || [];\n                   groupDict[group].push(row);\n               });\n               return groupDict;\n           });\n           // update rows\n           groups.subscribe(updateRowsWithGroupValues);\n           updateRowsWithGroupValues(groups());\n       }\n\n       if(listViewModel.infinite) {\n           //the listViewModel is managing its rows to account for infinite scroll\n           //the listAdvanced will show only up to 25 rows and show the infinitely scrolling list in a popup\n\n            visibleRows((listViewModel.allRows() || []).slice(0,20));\n            listViewModel.allRows.subscribe(function (newRows) {\n                visibleRows((newRows ||[]).slice(0,20));\n            });\n\n            showInfinite = function () {\n                listViewModel.rows(listViewModel.rows().slice(0,20));\n                notify('showPopup', merge(viewmodel, {\n                    template: 'listAdvanced_infinite_template',\n                    disableHasFocus: true\n                }));\n            }\n       }\n\n        viewmodel = merge(node, {\n            setReadonly: listViewModel.setReadonly,\n            getValue: listViewModel.getValue,\n            setValue: listViewModel.setValue,\n            headers: headers,\n            headerItems: headerItems,\n            footers: footers,\n            groups: groups,\n            list: listViewModel,\n            rows: listViewModel.infinite ? visibleRows : listViewModel.rows,\n            showInfinite: showInfinite,\n            showRemove: listViewModel.showRemove,\n            deleteRows: listViewModel.deleteRows,\n            itemDictionary: itemDictionary,\n            mappedChildNodes: listViewModel.mappedChildNodes, //for automatic stuff\n            context: this //for the bindings to access context\n        });\n        return viewmodel;\n    };\n"]}