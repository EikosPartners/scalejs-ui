{"version":3,"sources":["../../src/adapter/adapterViewModel.js"],"names":[],"mappings":"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","file":"adapterViewModel.js","sourcesContent":["import { observable, observableArray, computed, unwrap } from 'knockout';\nimport { createViewModels } from 'scalejs.metadataFactory';\nimport { receive, notify } from 'scalejs.messagebus';\nimport dataservice from 'dataservice';\nimport { merge, extend } from 'lodash';\nimport { get } from 'scalejs';\n\n    /* TODO:\n    In PJSON, we used readonly, errors, etc. We need a way to do that outside of adapter\n    i.e. plugin to adapter context with other components\n    */\n\n    /** Adapter: a viewless component which keeps track of child nodes and the data for the nodes\n     * @module adapter\n     *\n     * @param {object} node\n     *  The configuration object for the module\n     * @param {string} node.type='adapter'\n     *  The type of the node is adapter\n     * @param {string} node.id\n     *  The id for the module\n     * @param {boolean} [node.lazy=false]\n     *  If the child nodes need to be lazily loaded (e.g. delay creation of children viewmodels until data returns)\n     * @param {object|Object[]} [node.dataSourceEndpoint]\n     *  An object defining the endpoint(s) that makes the ajax calls\n     * @param {string} node.dataSourceEndpoint.uri\n     *   The uri for the endpoint\n     * @param {string} [node.dataSourceEndpoint.url]\n     *  The url for the endpoint\n     * @param {object} [node.dataSourceEndpoint.keyMap]\n     *  A mapper object to map keys\n     * @param {string} [node.dataSourceEndpoint.keyMap.resultsKey]\n     *  Map the results from the ajax call with this key\n     * @param {string} [node.dataSourceEndpoint.keyMap.dataKey]\n     *  Extend the data object with this key\n     * @param {object} [node.dataSourceEndpoint.options]\n     *  Options for the ajax call\n     * @param {array} node.children\n     *  The json configuration for children nodes which will be mapped to view models and kept track of from the adapter\n     * @param {array} [node.plugins]\n     *  The json configuration for plugins which will be accessible from getValue function, based upon type\n     *\n     * @property {array} mappedChildNodes the mapped children nodes\n     * @property {observable} data the data retrieved from dataSourceEndpoint and tracked from children\n     * @property {object} contextPlugins an object that contains the plugins which have been added to the adapter context\n     * @property {context} the context for the adapter (which can be utilized in a custom template)\n     * @property {function} dispose the dispose function for all internal subs\n     *\n     * @example\n     * {\n     *      \"type\": \"adapter\",\n     *      \"id\": \"ADAPTER_ID\",\n     *      \"dataSourceEndpoint\": [\n     *          {\n     *              \"uri\": \"endpoint/uri\",\n     *              \"options\": {\n     *                  \"type\": \"PUT\"\n     *              },\n     *              \"keyMap\": {\n     *                  \"dataKey\": \"a\",\n     *                  \"resultsKey\": \"b\"\n     *              }\n     *          }\n     *      ],\n     *      \"children\": [\n     *          // children json configuration goes here\n     *      ]\n     * }\n     */\n    export default function adapterViewModel(node) {\n        let dictionary = observable({}), // dictionary of nodes with an id\n            data = observable({}), // data of dictionary contents\n            context = {\n                metadata: node.children,\n                parentContext: this,\n                getValue: getValue,\n                dictionary: dictionary,\n                data: data\n            },\n            mappedChildNodes = observableArray(),\n            updated = false,\n            subs = [],\n            dataSyncSubscription,\n            plugins = node.plugins ? createViewModels.call(context, node.plugins) : [],\n            contextPlugins = {};\n\n        plugins.forEach(plugin => {\n            contextPlugins[plugin.type] = plugin;\n        });\n\n        // recursive function which parses through nodes and adds nodes with an id to dictionary\n        function createDictionary(nodes) {\n            let dict = dictionary.peek();\n            nodes.forEach(node => {\n                // add node to dictionary if it isnt there yet\n                if (node.id && !dict[node.id]) {\n                    dict[node.id] = node;\n                    updated = true;\n                }\n                // add children to dictionary if getValue function is not exposed\n                if (!node.getValue) {\n                    createDictionary(unwrap(node.mappedChildNodes) || []);\n                }\n            });\n        }\n\n        // keep the data current if the node value changed with dataSyncDescription\n        function syncDataDictionary() {\n            dataSyncSubscription = computed(() => {\n                let dict = dictionary();\n                Object.keys(dict).forEach(id => {\n                    if (dict[id].getValue) {\n                        data()[id] = dict[id].getValue();\n                    }\n                });\n            });\n        }\n\n        // pause dataSyncDescription and update the data\n        function updateData(newData) {\n            dataSyncSubscription && dataSyncSubscription.dispose();\n            data(newData);\n            syncDataDictionary();\n        }\n\n        // fetches the data from dataSourceEndpoint(s)\n        function fetchData() {\n            let dataSourceEndpointArray = Array.isArray(node.dataSourceEndpoint)\n                ? node.dataSourceEndpoint : [node.dataSourceEndpoint],\n                count = 0,\n                dataObject = data();\n\n            dataSourceEndpointArray.forEach(function(endpoint) {\n                dataservice.ajax(endpoint, function(error, results) {\n                    let resultsByKey,\n                        keyMap = endpoint.keyMap || {},\n                        newDataObject = {};\n\n                    count++;\n\n                    if (!error) {\n                        resultsByKey = keyMap.resultsKey ? get(results, keyMap.resultsKey) : results;\n                        // optional: keyMap.dataKey path to extend dataObject on\n                        if (keyMap.dataKey) {\n                            newDataObject[keyMap.dataKey] = resultsByKey;\n                        } else {\n                            newDataObject = resultsByKey;\n                        }\n                        extend(dataObject, newDataObject);\n                    }\n\n                    if (count === dataSourceEndpointArray.length) {\n                        updateData(dataObject);\n                        if (!mappedChildNodes().length) {\n                            mappedChildNodes(createViewModels.call(context, node.children || []));\n                        }\n                    }\n                });\n            });\n        }\n\n        function getValue(id) {\n            let node = dictionary()[id],\n                dataValue = (data() || {})[id];\n\n            // the node has been defined so get the value from the node\n            if (node && node.getValue) { return node.getValue(); }\n\n            // data has been defined for the node but the node doesnt exist yet\n            if (dataValue) { return dataValue; }\n\n            if (contextPlugins && contextPlugins[id]) {\n               return contextPlugins[id]();\n            }\n            return context.parentContext.getValue(id);\n        }\n\n        if (!node.lazy) {\n            mappedChildNodes(createViewModels.call(context, node.children || []));\n        }\n\n        // update dictionary if mappedChildNodes of a node updates\n        computed(() => {\n            updated = false;\n            createDictionary(mappedChildNodes())\n            if (updated) {\n                dictionary.valueHasMutated();\n            }\n        });\n\n        // initialize the data subscription\n        syncDataDictionary();\n\n        // get initial data\n        if (node.dataSourceEndpoint) {\n            fetchData();\n        }\n\n        // listen for 'refresh' event\n        subs.push(receive(node.id + '.refresh', function (options) {\n            fetchData(options);\n        }));\n\n    return merge(node, {\n        mappedChildNodes: mappedChildNodes,\n        data: data,\n        contextPlugins: contextPlugins,\n        context: context,\n        dispose: function () {\n            subs.forEach(function (sub) {\n                sub.dispose();\n            });\n        }\n    });\n};\n"]}